require('imager')
plant<- load.image('~/Documents/PHD/imageprocessing/IMG_1902.jpg')
dim(plant)
plot(plant)
cl <- color.at(plant,598,232)
plot(c1)
c1
plot(cl)
cmp <- imfill(dim=dim(plant),val=cl)
#Blur, compare, split across channels, compute Euclidean norm
d <- isoblur(plant,2) %>% { . - cmp } %>% imsplit("c") %>% enorm
plot(d,main="Distance map")
points(598,232,col="red")
msk <- px.flood(plant,100,100,sigma=.28) %>% as.cimg
plot(plant*msk)
test<-plant
test[[2]]
dim(test)
channels(test)
blah <- channels(test,1:3)
blah[[1]]
plot(blah[[1]])
plot(blah[[2]])
?load.image
imshift(plant,0,50) %>% plot
imshift(plant,50,0) %>% plot
map_il(2:4,~ imresize(plant,1/.)) %>% imappend("x") %>% plot
imresize(i,1/4) %>% imappend("x") %>% plot #Quarter size
imresize(plant,1/4) %>% imappend("x") %>% plot #Quarter size
#Rotate
imrotate(plant,30) %>% plot
knitr::opts_chunk$set(echo = TRUE)
```{r cars}
require(ggplot2)
require('imager')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
#require(ggplot2)
require('imager')
plant<- load.image('~/Documents/PHD/imageprocessing/burseragrav1.jpg .jpg')
plant<- load.image('~/Documents/PHD/imageprocessing/burseragrav1.jpg')
dim(plant)
plot(pressure)
plot(plant)
install.packages("RefManageR")
set.wd('~/Documents/GitHub/syllabi/')
setwd('~/Documents/GitHub/syllabi/')
rm(list=ls())
require('imager')
plant<- load.image('~/Documents/PHD/imageprocessing/IMG_1902.jpg')
plant<- load.image('~/Documents/GitHub/PhD//imageprocessing/IMG_1902.jpg')
msk <- px.flood(plant,100,100,sigma=.28) %>% as.cimg
plot(plant*msk)
plant<- load.image('~/Documents/GitHub/PhD//imageprocessing/burseragrav1.jpg')
msk <- px.flood(plant,100,100,sigma=.28) %>% as.cimg
plot(plant*msk)
plot(plant)
?px.flood
msk <- px.flood(plant,400,900,sigma=.28) %>% as.cimg
plot(plant*msk)
plot(msk)
plot(-1*msk)
plot((-1*msk)*plant)
plot(msk*plant)
dim(msk)
msk %>%as.data.frame%>%head
inv<- msk %>%as.data.frame
inv$value<- as.numeric(inv$value>0)
inv$value<- as.numeric(inv$value==0)
msk<- inv %>% as.cimg()
plot(msk*plant)
source('~/Documents/GitHub/PhD/imageprocessing/images.R')
knitr::opts_chunk$set(echo = TRUE)
indicatorMatrix <-function( test,xrange,yrange,types)
{
if(types=='RBG'){
newtest<- test %>% as.data.frame} else{newtest<-RGBtoHSV(test) %>% as.data.frame}
dfnew<-subset(newtest, x%in%xrange & y%in%yrange) %>%  group_by(cc) %>% summarize( SD = sd(value, na.rm=TRUE),Mean = mean(value, na.rm=TRUE))
tmp<-subset(newtest,cc==1)
tmp$value<-as.numeric( between (newtest$value[newtest$cc==1] , unlist(dfnew[1,3]-dfnew[1,2]), unlist(dfnew[1,3]+dfnew[1,2]) ) & between ( newtest$value[newtest$cc==2 ] , unlist(dfnew[2,3]-dfnew[2,2]), unlist(dfnew[2,3]+dfnew[2,2]))
& between ( newtest$value[newtest$cc==3] , unlist(dfnew[3,3]-dfnew[3,2]), unlist(dfnew[3,3]+dfnew[3,2])))
newtest$value<- rep(tmp$value,3) *newtest$value
tester<- newtest %>% as.cimg
return(list(tester,tmp,dfnew))
}
samplemat3<- indicatorMatrix(plant,100:200 ,850:950,'RBG')
library(plyr)
library(imager)
samplemat3<- indicatorMatrix(plant,100:200 ,850:950,'RBG')
library('dplyr')
install.packages('dplyr')
#require(ggplot2)
require('imager')
require('dplyr')
install.packages()
install.packages(dplyr)
install.packages('dplyr')
install.packages("dplyr")
install.packages('dplyr')
install.packages("Rcpp", dependencies=TRUE)
install.packages('mice')
knitr::opts_chunk$set(echo = TRUE)
grayscale(plant) %>% plot
library('plyr')
grayscale(plant) %>% plot
library(magrittr)
indicatorMatrix <-function( test,xrange,yrange,types)
{
if(types=='RBG'){
newtest<- test %>% as.data.frame} else{newtest<-RGBtoHSV(test) %>% as.data.frame}
dfnew<-subset(newtest, x%in%xrange & y%in%yrange) %>%  group_by(cc) %>% summarize( SD = sd(value, na.rm=TRUE),Mean = mean(value, na.rm=TRUE))
tmp<-subset(newtest,cc==1)
tmp$value<-as.numeric( between (newtest$value[newtest$cc==1] , unlist(dfnew[1,3]-dfnew[1,2]), unlist(dfnew[1,3]+dfnew[1,2]) ) & between ( newtest$value[newtest$cc==2 ] , unlist(dfnew[2,3]-dfnew[2,2]), unlist(dfnew[2,3]+dfnew[2,2]))
& between ( newtest$value[newtest$cc==3] , unlist(dfnew[3,3]-dfnew[3,2]), unlist(dfnew[3,3]+dfnew[3,2])))
newtest$value<- rep(tmp$value,3) *newtest$value
tester<- newtest %>% as.cimg
return(list(tester,tmp,dfnew))
}
samplemat3<- indicatorMatrix(plant,100:200 ,850:950,'RBG')
newtest<- test %>% as.data.frame
types='RBG'
head(newtest)
imshift(plant,0,50) %>% plot
#require(ggplot2)
require('imager')
require('plyr')
library('magrittr')
plot(plant)
newtest<- test %>% as.data.frame}
newtest<- test %>% as.data.frame
samplemat3<- indicatorMatrix(plant,100:200 ,850:950,'RBG')
install.packages("mice")
install.packages("~/Downloads/dplyr_0.8.1.tgz", repos = NULL, type = .Platform$pkgType)
library(dplyr)
library(dplyr)
install.packages('RCPP')
install.packages('Rcpp')
install.packages("Rcpp")
library('dplyr')
knitr::opts_chunk$set(echo = TRUE)
require('imager')
require('dplyr')
library('magrittr')
indicatorMatrix <-function( test,xrange,yrange,types)
{
if(types=='RBG'){
newtest<- test %>% as.data.frame} else{newtest<-RGBtoHSV(test) %>% as.data.frame}
dfnew<-subset(newtest, x%in%xrange & y%in%yrange) %>%  group_by(cc) %>% summarize( SD = sd(value, na.rm=TRUE),Mean = mean(value, na.rm=TRUE))
tmp<-subset(newtest,cc==1)
tmp$value<-as.numeric( between (newtest$value[newtest$cc==1] , unlist(dfnew[1,3]-dfnew[1,2]), unlist(dfnew[1,3]+dfnew[1,2]) ) & between ( newtest$value[newtest$cc==2 ] , unlist(dfnew[2,3]-dfnew[2,2]), unlist(dfnew[2,3]+dfnew[2,2]))
& between ( newtest$value[newtest$cc==3] , unlist(dfnew[3,3]-dfnew[3,2]), unlist(dfnew[3,3]+dfnew[3,2])))
newtest$value<- rep(tmp$value,3) *newtest$value
tester<- newtest %>% as.cimg
return(list(tester,tmp,dfnew))
}
samplemat3<- indicatorMatrix(plant,100:200 ,850:950,'RBG')
version
knitr::opts_chunk$set(echo = TRUE)
ff <- FFT(plant)
require('imager')
require('plyr')
require('magrittr')
between<-function(x,y,z){ return(x>=y & x<=z)}
ff <- FFT(plant)
a=ff %>% as.data.frame
head(ff)
head(ff$real)
head(ff$image)
head(ff$imag)
blah <-ff$imag
bw <- plant %>% greyscale
bw <- plant %>% grayscale
ff <- FFT(bq)
ff <- FFT(bw)
knitr::opts_chunk$set(echo = TRUE)
bw <- plant %>% grayscale
knitr::opts_chunk$set(echo = TRUE)
#   a = ft.fft2(A)
## c = a %*% b
#    C = ft.ifft2( c )
#   C = ft.fftshift(C)
#  return C
#}
#bw <- plant %>% grayscale
#ff <- FFT(bw)
#a=ff %>% as.data.frame
#plot(ff$real,main="Real part of the transform")
gray<- samplemat3[[1]] %>%grayscale
knitr::opts_chunk$set(echo = TRUE)
#   a = ft.fft2(A)
## c = a %*% b
#    C = ft.ifft2( c )
#   C = ft.fftshift(C)
#  return C
#}
#bw <- plant %>% grayscale
#ff <- FFT(bw)
#a=ff %>% as.data.frame
#plot(ff$real,main="Real part of the transform")
gray<- grayscale(samplemat3[[1]] )
require('imager')
require('plyr')
require('magrittr')
between<-function(x,y,z){ return(x>=y & x<=z)}
#   a = ft.fft2(A)
## c = a %*% b
#    C = ft.ifft2( c )
#   C = ft.fftshift(C)
#  return C
#}
#bw <- plant %>% grayscale
#ff <- FFT(bw)
#a=ff %>% as.data.frame
#plot(ff$real,main="Real part of the transform")
gray<- grayscale(samplemat3[[1]] )
indicatorMatrix <-function( test,xrange,yrange,types)
{
if(types=='RBG'){
newtest<- test %>% as.data.frame} else{newtest<-RGBtoHSV(test) %>% as.data.frame}
dfnew<-subset(newtest, x%in%xrange & y%in%yrange) %>% ddply( .(cc),summarize,SD = sd(value, na.rm=TRUE),Mean = mean(value, na.rm=TRUE))
tmp<-subset(newtest,cc==1)
tmp$value<-as.numeric( between (newtest$value[newtest$cc==1] , unlist(dfnew[1,3]-dfnew[1,2]), unlist(dfnew[1,3]+dfnew[1,2]) ) & between ( newtest$value[newtest$cc==2 ] , unlist(dfnew[2,3]-dfnew[2,2]), unlist(dfnew[2,3]+dfnew[2,2]))
& between ( newtest$value[newtest$cc==3] , unlist(dfnew[3,3]-dfnew[3,2]), unlist(dfnew[3,3]+dfnew[3,2])))
newtest$value<- rep(tmp$value,3) *newtest$value
tester<- newtest %>% as.cimg
return(list(tester,tmp,dfnew))
}
samplemat3<- indicatorMatrix(plant,900:1000 ,850:950,'RBG')
#Isolate Leaves
plot(samplemat3[[1]])
gray<- grayscale(samplemat3[[1]] )
pcamat<- gray %>% as.data.frame
head(pcamat)
?melt
library(reshape2)
install.packages(data.table)
install.packages('data.table')
pcamat2<- dcast(x~y,pcamat2, value.var='value')
pcamat2<- data.table::dcast(x~y,pcamat2, value.var='value')
pcamat<- gray %>% as.data.frame %>% data.table
require('data.table')
pcamat<- gray %>% as.data.frame %>% data.table
pcamat2<- data.table::dcast(x~y,pcamat2, value.var='value')
?ddcast
?dcast
pcamat2<- data.table::dcast(pcamat2,x~y, value.var='value')
pcamat2<- data.table::dcast(pcamat2,x~y, value.var='value')
pcamat2<- data.table::dcast(pcamat,x~y, value.var='value')
?eigen
cv<- cov(pcamat)
eig<-eigen(cv)
eig[[1]]
eig[[2]]
cv<- cov(pcamat2)
eig<-eigen(cv)
dotmat<-dot(pcamat2,eig[[2]])
install.packages('pracma')
library('pracma')
dotmat<-dot(pcamat2,eig[[2]])
eig[[2]]
eig[[2]][1:5,1:5]
cv<- data.table(cov(pcamat2))
cv<- data.frame(cov(pcamat2))
pcamat3<-princomp(pcamat2)
?princomp
pcamat3<-princomp(pcamat2,core=T)
pcamat3<-princomp(pcamat2,cor=T)
pcamat3<-princomp(t(pcamat2),cor=T)
R<- data.frame(cor(pcamat2))
R
R[1:5,1:5]
R<- data.frame(cov(pcamat2))
e<-eigen(R) #solving for the eigenvalues and eigenvectors from the correlation matrix
L<-e$values #placing the eigenvalues in L
Vm<-matrix(0,nrow=p,ncol=p) #creating a p x p matrix with zeroes.
p<-ncol(pcamat2) #no of variables
n<-nrow(pcamat2) #no of variables
e<-eigen(R) #solving for the eigenvalues and eigenvectors from the correlation matrix
L<-e$values #placing the eigenvalues in L
Vm<-matrix(0,nrow=n,ncol=p) #creating a p x p matrix with zeroes.
#Vm is an orthogonal matrix since all correlations between variable are 0.
diag(Vm)<-L
Vm<-matrix(0,nrow=p,ncol=p) #creating a p x p matrix with zeroes.
#Vm is an orthogonal matrix since all correlations between variable are 0.
diag(Vm)<-L
eig<-eigen(cv)
loadings<-e$vectors %*% sqrt(Vm)
#Vm is an orthogonal matrix since all correlations between variable are 0.
photo.pca <- prcomp(pcamat2, center = F)
PCs <- c(round(0.1 * nrow(pcamat2)))
photo<- photo.pca$x[,1:PCs] %*% t(photo.pca$rotation[,1:PCs])
head(photo)
photoimage<- as.cim(photo)
loadings<-e$vectors %*% sqrt(Vm)
photoimage<- as.cimg(photo)
plot(photoimage)
x11()
photoimage<- as.cimg(photo)
plot(photoimage)
x11()
plot(photoimage)
head(photo.pca$x)
PCs
photo.pca$x[1:5,1:5]
?prcomp
plot(photo.pca)
dim(photo.pca)
dim(photo.pca$x)
photo<- photo.pca$x[,1]%*%pcamat2
photo.pca$x[1,]
head(pcamat2)
photo<- photo.pca$x[1,]%*%pcamat2
is.numeric(pcamat2)
photo<- photo.pca$x[1,]%*%as.numeric(pcamat2)
pcamat<- gray %>% as.data.frame %>% matrix
photo.pca <- prcomp(pcamat2, center = F)
pcamat2<- data.table::dcast(pcamat,x~y, value.var='value') %>% as.matrix
pcamat2<- data.table::dcast(pcamat,x~y, value.var='value') #%>% as.matrix
pcamat<- gray %>% as.data.frame %>% data.table
pcamat2<- data.table::dcast(pcamat,x~y, value.var='value') #%>% as.matrix
pcamat2<- data.table::dcast(pcamat,x~y, value.var='value') %>% as.matrix
photo.pca <- prcomp(pcamat2, center = F)
photo<- photo.pca$x[1,]%*%as.numeric(pcamat2)
photo<- photo.pca$x[1,]%*%pcamat2
photo<- photo.pca$x[1:2,]%*%pcamat2
photo<- t(pcamat2)%*%photo.pca$x[1:2,]
photo<- pcamat2%*%photo.pca$x[1:2,]
photo<- pcamat2*photo.pca$x[1,]
as.cimg(photo) %>% plot
