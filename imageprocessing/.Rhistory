if (!is.null(brush)) {
ranges$x <- c(brush$xmin, brush$xmax)
ranges$y <- c(brush$ymin, brush$ymax)
} else {
ranges$x <- NULL
ranges$y <- NULL
}
})
}
shinyApp(ui, server)
ui <- fluidPage(
h4("Brush and double-click to zoom"),
plotOutput("plot1", height = 300,
dblclick = "plot1_dblclick",
brush = brushOpts(
id = "plot1_brush",
resetOnNew = TRUE))
)
shinyApp(ui, server)
ui <- fluidPage(
h4("Brush and double-click to zoom"),
plotOutput("plot1", height = 300,
dblclick = "plot1_dblclick",
brush = brushOpts(
id = "plot1_brush",
resetOnNew = TRUE), width = "100%"))
)
shinyApp(ui, server)
ui <- fluidPage(
h4("Brush and double-click to zoom"),
plotOutput("plot1", height = 300,
dblclick = "plot1_dblclick",
brush = brushOpts(
id = "plot1_brush",
resetOnNew = TRUE), width = "100%"))
,           actionButton("action", "Action"),
selectInput("select", h3("Select box"),
choices = list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3), selected = 1))
)
ui <- fluidPage(
h4("Brush and double-click to zoom"),
plotOutput("plot1", height = 300,
dblclick = "plot1_dblclick",
brush = brushOpts(
id = "plot1_brush",
resetOnNew = TRUE), width = "100%")
,           actionButton("action", "Action"),
selectInput("select", h3("Select box"),
choices = list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3), selected = 1))
)
ui <- fluidPage(
h4("Brush and double-click to zoom"),
plotOutput("plot1", height = 300,
dblclick = "plot1_dblclick",
brush = brushOpts(
id = "plot1_brush",
resetOnNew = TRUE), width = "100%")
,
actionButton("action", "Action"),
selectInput("select", h3("Select box"),
choices = list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3), selected = 1))
ui <- fluidPage(
h4("Brush and double-click to zoom"),
plotOutput("plot1", height = 300,
dblclick = "plot1_dblclick",
brush = brushOpts(
id = "plot1_brush",
resetOnNew = TRUE), width = "100%")
,
actionButton("action", "Action"),
selectInput("select", h3("Select box"),
choices = list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3), selected = 1))
library('EBImage')
img<-readImage('~/Documents/Github/PhD//imageprocessing/burseragrav1.jpg')
library('shiny')
ui <- fluidPage(
h4("Brush and double-click to zoom"),
plotOutput("plot1", height = 300,
dblclick = "plot1_dblclick",
brush = brushOpts(
id = "plot1_brush",
resetOnNew = TRUE), width = "100%")
,
actionButton("action", "Action"),
selectInput("select", h3("Select box"),
choices = list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3), selected = 1))
)
server <- function(input, output) {
# -------------------------------------------------------------------
# Single zoomable plot (on left)
ranges <- reactiveValues(x = NULL, y = NULL)
output$plot1 <- renderPlot({
if(!is.null(ranges$x)){
plot(img[ranges$x[1]:ranges$x[2],ranges$y[1]:ranges$y[2],])} else{plot(img)}
})
# When a double-click happens, check if there's a brush on the plot.
# If so, zoom to the brush bounds; if not, reset the zoom.
observeEvent(input$plot1_dblclick, {
brush <- input$plot1_brush
if (!is.null(brush)) {
ranges$x <- c(brush$xmin, brush$xmax)
ranges$y <- c(brush$ymin, brush$ymax)
} else {
ranges$x <- NULL
ranges$y <- NULL
}
})
}
shinyApp(ui, server)
?actionbutton
?actionButton
ui <- fluidPage(
h4("Brush and double-click to zoom"),
plotOutput("plot1", height = 300,
dblclick = "plot1_dblclick",
brush = brushOpts(
id = "plot1_brush",
resetOnNew = TRUE), width = "100%")
,
actionButton("action", "Action"),
selectInput("select", h3("Select box"),
choices = list("Leaf" = 1, "Stem" = 2,
"Flower" = 3,"Fruit" = 4,"Measure" = 5), selected = 1)
,      textOutput("selected_var")
)
server <- function(input, output) {
# -------------------------------------------------------------------
# Single zoomable plot (on left)
ranges <- reactiveValues(x = NULL, y = NULL)
output$plot1 <- renderPlot({
if(!is.null(ranges$x)){
plot(img[ranges$x[1]:ranges$x[2],ranges$y[1]:ranges$y[2],])} else{plot(img)}
})
# When a double-click happens, check if there's a brush on the plot.
# If so, zoom to the brush bounds; if not, reset the zoom.
observeEvent(input$plot1_dblclick, {
brush <- input$plot1_brush
if (!is.null(brush)) {
ranges$x <- c(brush$xmin, brush$xmax)
ranges$y <- c(brush$ymin, brush$ymax)
} else {
ranges$x <- NULL
ranges$y <- NULL
}
})
}
shinyApp(ui, server)
?reactive
}
ui <- fluidPage(
h4("Brush and double-click to zoom"),
plotOutput("plot1", height = 300,
dblclick = "plot1_dblclick",
brush = brushOpts(
id = "plot1_brush",
resetOnNew = TRUE), width = "100%")
,
actionButton("action", "Action"),
selectInput("select", h3("Select box"),
choices = list("Leaf" = 1, "Stem" = 2,
"Flower" = 3,"Fruit" = 4,"Measure" = 5), selected = 1)
,      textOutput("summarize")
)
server <- function(input, output) {
# -------------------------------------------------------------------
# Single zoomable plot (on left)
ranges <- reactiveValues(x = NULL, y = NULL)
output$plot1 <- renderPlot({
if(!is.null(ranges$x)){
plot(img[ranges$x[1]:ranges$x[2],ranges$y[1]:ranges$y[2],])} else{plot(img)}
})
# When a double-click happens, check if there's a brush on the plot.
# If so, zoom to the brush bounds; if not, reset the zoom.
observeEvent(input$plot1_dblclick, {
brush <- input$plot1_brush
if (!is.null(brush)) {
ranges$x <- c(brush$xmin, brush$xmax)
ranges$y <- c(brush$ymin, brush$ymax)
} else {
ranges$x <- NULL
ranges$y <- NULL
}
})
output$summarize <- renderText({
if(!is.null(ranges$x)){
subimg<-img[ranges$x[1]:ranges$x[2],ranges$y[1]:ranges$y[2],]
subimgray<-channel(subimg,"gray")
y<-bwlabel(subimgray)
computeFeatures.shape(y)
}
else{'No Image selected'}
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
grayimage<-channel(img,"gray")
crop<-grayimage[450:600,1175:1500]
y<-bwlabel(crop)
y
plot(y)
display(y)
display(grayimage)
display(crop)
crop
y = gblur(crop, 3) < .8
y <- bwlabel(y)
plot(y)
y = gblur(crop, 3) > .8
y
plot(y)
?actionButton
computeFeatures.shape(img)
computeFeatures.shape(y)
paste(computeFeatures.shape(y),collapse=' ')
paste(paste(names(computeFeatures.shape(y)),computeFeatures.shape(y),collapse=' ')
)
names(computeFeatures.shape(y))
computeFeatures.shape(y)
a<- computeFeatures.shape(y)
a
names(a)
a[1,]
col.names(a[1,]
)
? computeFeatures.shape
paste(c('area','perimeter'),computeFeatures.shape(y)[,c(1,2)])
ui <- fluidPage(
h4("Brush and double-click to zoom"),
plotOutput("plot1", height = 300,
dblclick = "plot1_dblclick",
brush = brushOpts(
id = "plot1_brush",
resetOnNew = TRUE), width = "100%")
,
actionButton("action", "Size"),
selectInput("select", h3("Select box"),
choices = list("Leaf" = 1, "Stem" = 2,
"Flower" = 3,"Fruit" = 4,"Measure" = 5), selected = 1)
,      textOutput("summarize")
)
server <- function(input, output) {
# -------------------------------------------------------------------
# Single zoomable plot (on left)
ranges <- reactiveValues(x = NULL, y = NULL)
output$plot1 <- renderPlot({
if(!is.null(ranges$x)){
plot(img[ranges$x[1]:ranges$x[2],ranges$y[1]:ranges$y[2],])} else{plot(img)}
})
# When a double-click happens, check if there's a brush on the plot.
# If so, zoom to the brush bounds; if not, reset the zoom.
observeEvent(input$plot1_dblclick, {
brush <- input$plot1_brush
if (!is.null(brush)) {
ranges$x <- c(brush$xmin, brush$xmax)
ranges$y <- c(brush$ymin, brush$ymax)
} else {
ranges$x <- NULL
ranges$y <- NULL
}
})
output$summarize <- renderText({
if(!is.null(ranges$x)){
subimg<-img[ranges$x[1]:ranges$x[2],ranges$y[1]:ranges$y[2],]
subimgray<-channel(subimg,"gray")
y = gblur(crop, 3) > .8
y<-bwlabel(y)
paste(c('area','perimeter'),computeFeatures.shape(y)[,c(1,2)])
}
else{'No Image selected'}
})
}
shinyApp(ui, server)
saveData <- function(data) {
data <- t(data)
# Create a unique file name
fileName <- sprintf("%s_%s.csv", as.integer(Sys.time()), digest::digest(data))
# Write the file to the local system
write.csv(
x = data,
file = file.path(outputDir, fileName),
row.names = FALSE, quote = TRUE
)
}
saveData(c('1','2','2'))
?digest
outputDir<-getwd()
saveData <- function(data) {
data <- t(data)
# Create a unique file name
fileName <- sprintf("%s_%s.csv", as.integer(Sys.time()), digest::digest(data))
# Write the file to the local system
write.csv(
x = data,
file = file.path(outputDir, fileName),
row.names = FALSE, quote = TRUE
)
}
saveData(c('1','2','2'))
getwd()
library('shiny')
ui <- fluidPage(
h4("Brush and double-click to zoom"),
plotOutput("plot1", height = 300,
dblclick = "plot1_dblclick",
brush = brushOpts(
id = "plot1_brush",
resetOnNew = TRUE), width = "100%")
,
actionButton("action", "Save"),
selectInput("select", h3("Select box"),
choices = list("Leaf" = 1, "Stem" = 2,
"Flower" = 3,"Fruit" = 4,"Measure" = 5), selected = 1)
,      textOutput("summarize")
)
server <- function(input, output) {
# -------------------------------------------------------------------
# Single zoomable plot (on left)
ranges <- reactiveValues(x = NULL, y = NULL)
output$plot1 <- renderPlot({
if(!is.null(ranges$x)){
plot(img[ranges$x[1]:ranges$x[2],ranges$y[1]:ranges$y[2],])} else{plot(img)}
})
# When a double-click happens, check if there's a brush on the plot.
# If so, zoom to the brush bounds; if not, reset the zoom.
observeEvent(input$plot1_dblclick, {
brush <- input$plot1_brush
if (!is.null(brush)) {
ranges$x <- c(brush$xmin, brush$xmax)
ranges$y <- c(brush$ymin, brush$ymax)
} else {
ranges$x <- NULL
ranges$y <- NULL
}
})
output$summarize <- renderText({
if(!is.null(ranges$x)){
subimg<-img[ranges$x[1]:ranges$x[2],ranges$y[1]:ranges$y[2],]
subimgray<-channel(subimg,"gray")
y = gblur(crop, 3) > .8
y<-bwlabel(y)
paste(c('area','perimeter'),computeFeatures.shape(y)[,c(1,2)])
}
else{'No Image selected'}
})
}
shinyApp(ui, server)
?actionButton
ui <- fluidPage(
h4("Brush and double-click to zoom"),
plotOutput("plot1", height = 300,
dblclick = "plot1_dblclick",
brush = brushOpts(
id = "plot1_brush",
resetOnNew = TRUE), width = "100%")
,
actionButton("action", "Save"),
selectInput("select", h3("Select box"),
choices = list("Leaf" = 1, "Stem" = 2,
"Flower" = 3,"Fruit" = 4,"Measure" = 5), selected = 1)
,      textOutput("summarize")
)
server <- function(input, output) {
# -------------------------------------------------------------------
# Single zoomable plot (on left)
ranges <- reactiveValues(x = NULL, y = NULL)
output$plot1 <- renderPlot({
if(!is.null(ranges$x)){
plot(img[ranges$x[1]:ranges$x[2],ranges$y[1]:ranges$y[2],])} else{plot(img)}
})
# When a double-click happens, check if there's a brush on the plot.
# If so, zoom to the brush bounds; if not, reset the zoom.
observeEvent(input$plot1_dblclick, {
brush <- input$plot1_brush
if (!is.null(brush)) {
ranges$x <- c(brush$xmin, brush$xmax)
ranges$y <- c(brush$ymin, brush$ymax)
} else {
ranges$x <- NULL
ranges$y <- NULL
}
})
output$summarize <- renderText({
if(!is.null(ranges$x)){
subimg<-img[ranges$x[1]:ranges$x[2],ranges$y[1]:ranges$y[2],]
subimgray<-channel(subimg,"gray")
y = gblur(crop, 3) > .8
y<-bwlabel(y)
paste(c('area','perimeter'),computeFeatures.shape(y)[,c(1,2)])
}
else{'No Image selected'}
})
if(!is.null(action)) {saveData(c(ranges$x,ranges$y,select))}
}
shinyApp(ui, server)
server <- function(input, output) {
# -------------------------------------------------------------------
# Single zoomable plot (on left)
ranges <- reactiveValues(x = NULL, y = NULL)
output$plot1 <- renderPlot({
if(!is.null(ranges$x)){
plot(img[ranges$x[1]:ranges$x[2],ranges$y[1]:ranges$y[2],])} else{plot(img)}
})
# When a double-click happens, check if there's a brush on the plot.
# If so, zoom to the brush bounds; if not, reset the zoom.
observeEvent(input$plot1_dblclick, {
brush <- input$plot1_brush
if (!is.null(brush)) {
ranges$x <- c(brush$xmin, brush$xmax)
ranges$y <- c(brush$ymin, brush$ymax)
} else {
ranges$x <- NULL
ranges$y <- NULL
}
})
output$summarize <- renderText({
if(!is.null(ranges$x)){
subimg<-img[ranges$x[1]:ranges$x[2],ranges$y[1]:ranges$y[2],]
subimgray<-channel(subimg,"gray")
y = gblur(crop, 3) > .8
y<-bwlabel(y)
paste(c('area','perimeter'),computeFeatures.shape(y)[,c(1,2)])
}
else{'No Image selected'}
})
if(!is.null(input$action)) {saveData(c(ranges$x,ranges$y,input$select))}
}
shinyApp(ui, server)
ui <- fluidPage(
h4("Brush and double-click to zoom"),
plotOutput("plot1", height = 300,
dblclick = "plot1_dblclick",
brush = brushOpts(
id = "plot1_brush",
resetOnNew = TRUE), width = "100%")
,
actionButton("action", "Save"),
selectInput("select", h3("Select box"),
choices = list("Leaf" = 1, "Stem" = 2,
"Flower" = 3,"Fruit" = 4,"Measure" = 5), selected = 1)
,      textOutput("summarize")
)
server <- function(input, output) {
# -------------------------------------------------------------------
# Single zoomable plot (on left)
ranges <- reactiveValues(x = NULL, y = NULL)
output$plot1 <- renderPlot({
if(!is.null(ranges$x)){
plot(img[ranges$x[1]:ranges$x[2],ranges$y[1]:ranges$y[2],])} else{plot(img)}
})
# When a double-click happens, check if there's a brush on the plot.
# If so, zoom to the brush bounds; if not, reset the zoom.
observeEvent(input$plot1_dblclick, {
brush <- input$plot1_brush
if (!is.null(brush)) {
ranges$x <- c(brush$xmin, brush$xmax)
ranges$y <- c(brush$ymin, brush$ymax)
} else {
ranges$x <- NULL
ranges$y <- NULL
}
})
output$summarize <- renderText({
if(!is.null(ranges$x)){
subimg<-img[ranges$x[1]:ranges$x[2],ranges$y[1]:ranges$y[2],]
subimgray<-channel(subimg,"gray")
y = gblur(crop, 3) > .8
y<-bwlabel(y)
paste(c('area','perimeter'),computeFeatures.shape(y)[,c(1,2)])
}
else{'No Image selected'}
})
if(!is.null(input$action)) {saveData(c(ranges$x,ranges$y,input$select))}
}
shinyApp(ui, server)
server <- function(input, output) {
# -------------------------------------------------------------------
# Single zoomable plot (on left)
ranges <- reactiveValues(x = NULL, y = NULL)
output$plot1 <- renderPlot({
if(!is.null(ranges$x)){
plot(img[ranges$x[1]:ranges$x[2],ranges$y[1]:ranges$y[2],])} else{plot(img)}
})
# When a double-click happens, check if there's a brush on the plot.
# If so, zoom to the brush bounds; if not, reset the zoom.
observeEvent(input$plot1_dblclick, {
brush <- input$plot1_brush
if (!is.null(brush)) {
ranges$x <- c(brush$xmin, brush$xmax)
ranges$y <- c(brush$ymin, brush$ymax)
} else {
ranges$x <- NULL
ranges$y <- NULL
}
})
output$summarize <- renderText({
if(!is.null(ranges$x)){
subimg<-img[ranges$x[1]:ranges$x[2],ranges$y[1]:ranges$y[2],]
subimgray<-channel(subimg,"gray")
y = gblur(crop, 3) > .8
y<-bwlabel(y)
paste(c('area','perimeter'),computeFeatures.shape(y)[,c(1,2)])
}
else{'No Image selected'}
})
observeEvent(input$action,{saveData(c(ranges$x,ranges$y,input$select))})
}
shinyApp(ui, server)
