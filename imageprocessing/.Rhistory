require('imager')
require('dplyr')
install.packages()
install.packages(dplyr)
install.packages('dplyr')
install.packages("dplyr")
install.packages('dplyr')
install.packages("Rcpp", dependencies=TRUE)
install.packages('mice')
knitr::opts_chunk$set(echo = TRUE)
grayscale(plant) %>% plot
library('plyr')
grayscale(plant) %>% plot
library(magrittr)
indicatorMatrix <-function( test,xrange,yrange,types)
{
if(types=='RBG'){
newtest<- test %>% as.data.frame} else{newtest<-RGBtoHSV(test) %>% as.data.frame}
dfnew<-subset(newtest, x%in%xrange & y%in%yrange) %>%  group_by(cc) %>% summarize( SD = sd(value, na.rm=TRUE),Mean = mean(value, na.rm=TRUE))
tmp<-subset(newtest,cc==1)
tmp$value<-as.numeric( between (newtest$value[newtest$cc==1] , unlist(dfnew[1,3]-dfnew[1,2]), unlist(dfnew[1,3]+dfnew[1,2]) ) & between ( newtest$value[newtest$cc==2 ] , unlist(dfnew[2,3]-dfnew[2,2]), unlist(dfnew[2,3]+dfnew[2,2]))
& between ( newtest$value[newtest$cc==3] , unlist(dfnew[3,3]-dfnew[3,2]), unlist(dfnew[3,3]+dfnew[3,2])))
newtest$value<- rep(tmp$value,3) *newtest$value
tester<- newtest %>% as.cimg
return(list(tester,tmp,dfnew))
}
samplemat3<- indicatorMatrix(plant,100:200 ,850:950,'RBG')
newtest<- test %>% as.data.frame
types='RBG'
head(newtest)
imshift(plant,0,50) %>% plot
#require(ggplot2)
require('imager')
require('plyr')
library('magrittr')
plot(plant)
newtest<- test %>% as.data.frame}
newtest<- test %>% as.data.frame
samplemat3<- indicatorMatrix(plant,100:200 ,850:950,'RBG')
install.packages("mice")
install.packages("~/Downloads/dplyr_0.8.1.tgz", repos = NULL, type = .Platform$pkgType)
library(dplyr)
library(dplyr)
install.packages('RCPP')
install.packages('Rcpp')
install.packages("Rcpp")
library('dplyr')
knitr::opts_chunk$set(echo = TRUE)
require('imager')
require('dplyr')
library('magrittr')
indicatorMatrix <-function( test,xrange,yrange,types)
{
if(types=='RBG'){
newtest<- test %>% as.data.frame} else{newtest<-RGBtoHSV(test) %>% as.data.frame}
dfnew<-subset(newtest, x%in%xrange & y%in%yrange) %>%  group_by(cc) %>% summarize( SD = sd(value, na.rm=TRUE),Mean = mean(value, na.rm=TRUE))
tmp<-subset(newtest,cc==1)
tmp$value<-as.numeric( between (newtest$value[newtest$cc==1] , unlist(dfnew[1,3]-dfnew[1,2]), unlist(dfnew[1,3]+dfnew[1,2]) ) & between ( newtest$value[newtest$cc==2 ] , unlist(dfnew[2,3]-dfnew[2,2]), unlist(dfnew[2,3]+dfnew[2,2]))
& between ( newtest$value[newtest$cc==3] , unlist(dfnew[3,3]-dfnew[3,2]), unlist(dfnew[3,3]+dfnew[3,2])))
newtest$value<- rep(tmp$value,3) *newtest$value
tester<- newtest %>% as.cimg
return(list(tester,tmp,dfnew))
}
samplemat3<- indicatorMatrix(plant,100:200 ,850:950,'RBG')
version
knitr::opts_chunk$set(echo = TRUE)
ff <- FFT(plant)
require('imager')
require('plyr')
require('magrittr')
between<-function(x,y,z){ return(x>=y & x<=z)}
ff <- FFT(plant)
a=ff %>% as.data.frame
head(ff)
head(ff$real)
head(ff$image)
head(ff$imag)
blah <-ff$imag
bw <- plant %>% greyscale
bw <- plant %>% grayscale
ff <- FFT(bq)
ff <- FFT(bw)
knitr::opts_chunk$set(echo = TRUE)
bw <- plant %>% grayscale
knitr::opts_chunk$set(echo = TRUE)
#   a = ft.fft2(A)
## c = a %*% b
#    C = ft.ifft2( c )
#   C = ft.fftshift(C)
#  return C
#}
#bw <- plant %>% grayscale
#ff <- FFT(bw)
#a=ff %>% as.data.frame
#plot(ff$real,main="Real part of the transform")
gray<- samplemat3[[1]] %>%grayscale
knitr::opts_chunk$set(echo = TRUE)
#   a = ft.fft2(A)
## c = a %*% b
#    C = ft.ifft2( c )
#   C = ft.fftshift(C)
#  return C
#}
#bw <- plant %>% grayscale
#ff <- FFT(bw)
#a=ff %>% as.data.frame
#plot(ff$real,main="Real part of the transform")
gray<- grayscale(samplemat3[[1]] )
require('imager')
require('plyr')
require('magrittr')
between<-function(x,y,z){ return(x>=y & x<=z)}
#   a = ft.fft2(A)
## c = a %*% b
#    C = ft.ifft2( c )
#   C = ft.fftshift(C)
#  return C
#}
#bw <- plant %>% grayscale
#ff <- FFT(bw)
#a=ff %>% as.data.frame
#plot(ff$real,main="Real part of the transform")
gray<- grayscale(samplemat3[[1]] )
indicatorMatrix <-function( test,xrange,yrange,types)
{
if(types=='RBG'){
newtest<- test %>% as.data.frame} else{newtest<-RGBtoHSV(test) %>% as.data.frame}
dfnew<-subset(newtest, x%in%xrange & y%in%yrange) %>% ddply( .(cc),summarize,SD = sd(value, na.rm=TRUE),Mean = mean(value, na.rm=TRUE))
tmp<-subset(newtest,cc==1)
tmp$value<-as.numeric( between (newtest$value[newtest$cc==1] , unlist(dfnew[1,3]-dfnew[1,2]), unlist(dfnew[1,3]+dfnew[1,2]) ) & between ( newtest$value[newtest$cc==2 ] , unlist(dfnew[2,3]-dfnew[2,2]), unlist(dfnew[2,3]+dfnew[2,2]))
& between ( newtest$value[newtest$cc==3] , unlist(dfnew[3,3]-dfnew[3,2]), unlist(dfnew[3,3]+dfnew[3,2])))
newtest$value<- rep(tmp$value,3) *newtest$value
tester<- newtest %>% as.cimg
return(list(tester,tmp,dfnew))
}
samplemat3<- indicatorMatrix(plant,900:1000 ,850:950,'RBG')
#Isolate Leaves
plot(samplemat3[[1]])
gray<- grayscale(samplemat3[[1]] )
pcamat<- gray %>% as.data.frame
head(pcamat)
?melt
library(reshape2)
install.packages(data.table)
install.packages('data.table')
pcamat2<- dcast(x~y,pcamat2, value.var='value')
pcamat2<- data.table::dcast(x~y,pcamat2, value.var='value')
pcamat<- gray %>% as.data.frame %>% data.table
require('data.table')
pcamat<- gray %>% as.data.frame %>% data.table
pcamat2<- data.table::dcast(x~y,pcamat2, value.var='value')
?ddcast
?dcast
pcamat2<- data.table::dcast(pcamat2,x~y, value.var='value')
pcamat2<- data.table::dcast(pcamat2,x~y, value.var='value')
pcamat2<- data.table::dcast(pcamat,x~y, value.var='value')
?eigen
cv<- cov(pcamat)
eig<-eigen(cv)
eig[[1]]
eig[[2]]
cv<- cov(pcamat2)
eig<-eigen(cv)
dotmat<-dot(pcamat2,eig[[2]])
install.packages('pracma')
library('pracma')
dotmat<-dot(pcamat2,eig[[2]])
eig[[2]]
eig[[2]][1:5,1:5]
cv<- data.table(cov(pcamat2))
cv<- data.frame(cov(pcamat2))
pcamat3<-princomp(pcamat2)
?princomp
pcamat3<-princomp(pcamat2,core=T)
pcamat3<-princomp(pcamat2,cor=T)
pcamat3<-princomp(t(pcamat2),cor=T)
R<- data.frame(cor(pcamat2))
R
R[1:5,1:5]
R<- data.frame(cov(pcamat2))
e<-eigen(R) #solving for the eigenvalues and eigenvectors from the correlation matrix
L<-e$values #placing the eigenvalues in L
Vm<-matrix(0,nrow=p,ncol=p) #creating a p x p matrix with zeroes.
p<-ncol(pcamat2) #no of variables
n<-nrow(pcamat2) #no of variables
e<-eigen(R) #solving for the eigenvalues and eigenvectors from the correlation matrix
L<-e$values #placing the eigenvalues in L
Vm<-matrix(0,nrow=n,ncol=p) #creating a p x p matrix with zeroes.
#Vm is an orthogonal matrix since all correlations between variable are 0.
diag(Vm)<-L
Vm<-matrix(0,nrow=p,ncol=p) #creating a p x p matrix with zeroes.
#Vm is an orthogonal matrix since all correlations between variable are 0.
diag(Vm)<-L
eig<-eigen(cv)
loadings<-e$vectors %*% sqrt(Vm)
#Vm is an orthogonal matrix since all correlations between variable are 0.
photo.pca <- prcomp(pcamat2, center = F)
PCs <- c(round(0.1 * nrow(pcamat2)))
photo<- photo.pca$x[,1:PCs] %*% t(photo.pca$rotation[,1:PCs])
head(photo)
photoimage<- as.cim(photo)
loadings<-e$vectors %*% sqrt(Vm)
photoimage<- as.cimg(photo)
plot(photoimage)
x11()
photoimage<- as.cimg(photo)
plot(photoimage)
x11()
plot(photoimage)
head(photo.pca$x)
PCs
photo.pca$x[1:5,1:5]
?prcomp
plot(photo.pca)
dim(photo.pca)
dim(photo.pca$x)
photo<- photo.pca$x[,1]%*%pcamat2
photo.pca$x[1,]
head(pcamat2)
photo<- photo.pca$x[1,]%*%pcamat2
is.numeric(pcamat2)
photo<- photo.pca$x[1,]%*%as.numeric(pcamat2)
pcamat<- gray %>% as.data.frame %>% matrix
photo.pca <- prcomp(pcamat2, center = F)
pcamat2<- data.table::dcast(pcamat,x~y, value.var='value') %>% as.matrix
pcamat2<- data.table::dcast(pcamat,x~y, value.var='value') #%>% as.matrix
pcamat<- gray %>% as.data.frame %>% data.table
pcamat2<- data.table::dcast(pcamat,x~y, value.var='value') #%>% as.matrix
pcamat2<- data.table::dcast(pcamat,x~y, value.var='value') %>% as.matrix
photo.pca <- prcomp(pcamat2, center = F)
photo<- photo.pca$x[1,]%*%as.numeric(pcamat2)
photo<- photo.pca$x[1,]%*%pcamat2
photo<- photo.pca$x[1:2,]%*%pcamat2
photo<- t(pcamat2)%*%photo.pca$x[1:2,]
photo<- pcamat2%*%photo.pca$x[1:2,]
photo<- pcamat2*photo.pca$x[1,]
as.cimg(photo) %>% plot
knitr::opts_chunk$set(echo = TRUE)
indicatorMatrix <-function( test,xrange,yrange,types)
{
if(types=='RBG'){
newtest<- test %>% as.data.frame} else{newtest<-RGBtoHSV(test) %>% as.data.frame}
dfnew<-subset(newtest, x%in%xrange & y%in%yrange) %>% ddply( .(cc),summarize,SD = sd(value, na.rm=TRUE),Mean = mean(value, na.rm=TRUE))
tmp<-subset(newtest,cc==1)
tmp$value<-as.numeric( between (newtest$value[newtest$cc==1] , unlist(dfnew[1,3]-dfnew[1,2]), unlist(dfnew[1,3]+dfnew[1,2]) ) & between ( newtest$value[newtest$cc==2 ] , unlist(dfnew[2,3]-dfnew[2,2]), unlist(dfnew[2,3]+dfnew[2,2]))
& between ( newtest$value[newtest$cc==3] , unlist(dfnew[3,3]-dfnew[3,2]), unlist(dfnew[3,3]+dfnew[3,2])))
newtest$value<- rep(tmp$value,3) *newtest$value
tester<- newtest %>% as.cimg
return(list(tester,tmp,dfnew))
}
samplemat3<- indicatorMatrix(plant,900:1000 ,850:950,'RBG')
require('imager')
require('plyr')
require('magrittr')
require('data.table')
gray<- grayscale(samplemat3[[1]] )
indicatorMatrix <-function( test,xrange,yrange,types)
{
if(types=='RBG'){
newtest<- test %>% as.data.frame} else{newtest<-RGBtoHSV(test) %>% as.data.frame}
dfnew<-subset(newtest, x%in%xrange & y%in%yrange) %>% ddply( .(cc),summarize,SD = sd(value, na.rm=TRUE),Mean = mean(value, na.rm=TRUE))
tmp<-subset(newtest,cc==1)
tmp$value<-as.numeric( between (newtest$value[newtest$cc==1] , unlist(dfnew[1,3]-dfnew[1,2]), unlist(dfnew[1,3]+dfnew[1,2]) ) & between ( newtest$value[newtest$cc==2 ] , unlist(dfnew[2,3]-dfnew[2,2]), unlist(dfnew[2,3]+dfnew[2,2]))
& between ( newtest$value[newtest$cc==3] , unlist(dfnew[3,3]-dfnew[3,2]), unlist(dfnew[3,3]+dfnew[3,2])))
newtest$value<- rep(tmp$value,3) *newtest$value
tester<- newtest %>% as.cimg
return(list(tester,tmp,dfnew))
}
samplemat3<- indicatorMatrix(plant,900:1000 ,850:950,'RBG')
names(samplemat3)
names(samplemat3[[2]]
binImage <- samplemat3[[2]] %>% as.cimg
plot(binImage)
binImage%>% as.data.frame %>% sum(value)
binImage%>% as.data.frame %>% head
head(samplemat3[[2]])
sum(samplemat3[[2]])
sum(samplemat3[[2]]$value)
binImageShrink <- samplemat3[[2]] %>% as.cimg %>% shrink(1)
binImageShrink <- samplemat3[[2]] %>% as.cimg %>% shrink(1) %>% as.data.frame()
(samplemat3[[2]]- binImageShrink ) %>% as.cimg %>% plot
binImageShrink
dim(samplemat3[[2]])
dim(binImage)
dim(binImageShrink)
Area<- sum(samplemat3[[2]]$value)
Area
sum(binImageShrink$value)
binImageShrink
sum(samplemat3[[2]]$value)- sum(binImageShrink$z)
sum(samplemat3[[2]]$value)- sum(binImageShrink$z)
sum(binImageShrink$z)
dim(binImageShrink)
dim(samplemat3)
dim(samplemat3[[2]])
sum(binImageShrink$cc)
samplemat3[[2]] %>% as.cimg %>% shrink(1) %>% plot
?shrink
samplemat3[[2]] %>% as.cimg %>% shrink(2) %>% plot
samplemat3[[2]] %>% as.cimg %>% shrink(1) %>% plot
samplemat3[[2]] %>% as.cimg %>% plot
subsetDF<-  subset (samplemat3[[2]], value==1)
knitr::opts_chunk$set(echo = TRUE)
require('imager')
require('plyr')
require('magrittr')
require('data.table')
#   a = ft.fft2(A)
## c = a %*% b
#    C = ft.ifft2( c )
#   C = ft.fftshift(C)
#  return C
#}
#bw <- plant %>% grayscale
#ff <- FFT(bw)
#a=ff %>% as.data.frame
#plot(ff$real,main="Real part of the transform")
gray<- grayscale(plant )
pcamat<- gray %>% as.data.frame %>% data.table
photo.pca <- prcomp(pcamat, center = F)
photo.pca
photo<- pcamat2*photo.pca$x[,1]
photo<- pcamat*photo.pca$x[,1]
photo%>% as.cimg%>% plot
photo<- pcamat[,3]*photo.pca$x[3,1]
photo%>% as.cimg%>% plot
#PCs <- c(round(0.9 * nrow(pcamat2)))
photo<- pcamat
photo[,3]<- pcamat[,3]*photo.pca$x[3,1]
photo%>% as.cimg%>% plot
x11()
photo%>% as.cimg%>% plot
version
cite('ggplot2')
citation('ggplot2')
citation()
citation("ggplot2")
citation("imageR")
citation("imager")
install.packages('ggplot2')
citation("ggplot2")
library('rpart')
citation('rpart')
install.packages("randomForest")
citation("randomForest")
install.packages(‘randomForestExplainer’)
install.packages("randomForestExplainer")
citation("randomForestExplainer")
?lmeans
?kmeans
citation('stats')
?factorial
factorial(5)
451/120
install.packages("caret")
citation(caret)
citation('caret')
install.packages(rworldmap)
install.packages('rworldmap')
library('rworldmap')
read.csv('0016459-190621201848488.csv')
getwd
setwd('~/Documents/')
gbif<-read.csv('0016459-190621201848488.csv')
gbif<-read.csv('0016459-190621201848488.csv',sep='\t')
head(gbif)
gbifMapData<-subset(gbif,!is.na(decimalLatitude)&!is.na(decimalLongitude))
newmap <- getMap(resolution = "high")
points(gbifMapData$decimalLongitude, gbifMapData$decimalLatitude, col = "red", cex = .6)
plot(newmap)
points(gbifMapData$decimalLongitude, gbifMapData$decimalLatitude, col = "red", cex = .6)
plot(newmap, xlim = c(0, 100),, asp = 1)
points(gbifMapData$decimalLongitude, gbifMapData$decimalLatitude, col = "red", cex = .6)
plot(newmap, xlim = c(50, 90),, asp = 1)
plot(newmap, xlim = c(50, 80),, asp = 1)
plot(newmap, xlim = c(50, 60),, asp = 1)
plot(newmap, xlim = c(50, 60), asp = 1)
plot(newmap)
points(gbifMapData$decimalLongitude, gbifMapData$decimalLatitude, col = "red", cex = .6)
gbifMapData$decimalLatitude
gbifMapData$decimalLongitude
gbifMapData<-subset(gbif,!is.na(decimalLatitude)&!is.na(decimalLongitude) &!decimalLongitude>0)
plot(newmap)
points(gbifMapData$decimalLongitude, gbifMapData$decimalLatitude, col = "red", cex = .6)
gbifMapData<-subset(gbif,!is.na(decimalLatitude)&!is.na(decimalLongitude) &!decimalLongitude!=0)
gbifMapData<-subset(gbif,!is.na(decimalLatitude)&!is.na(decimalLongitude) &decimalLongitude!=0)
plot(newmap)
points(gbifMapData$decimalLongitude, gbifMapData$decimalLatitude, col = "red", cex = .6)
plot(newmap)
points(gbifMapData$decimalLongitude, gbifMapData$decimalLatitude, col = "red", cex = .6)
gbifMapData$decimalLongitude
gbifMapData<-subset(gbif,!is.na(decimalLatitude)&!is.na(decimalLongitude) &decimalLongitude<-1)
gbifMapData<-subset(gbif,!is.na(decimalLatitude)&!is.na(decimalLongitude) &decimalLongitude<-1)
gbifMapData<-subset(gbif,!is.na(decimalLatitude)&!is.na(decimalLongitude) &decimalLongitude< -1)
newmap <- getMap(resolution = "high")
plot(newmap)
points(gbifMapData$decimalLongitude, gbifMapData$decimalLatitude, col = "red", cex = .6)
library('imager')
?cannyEdges
knitr::opts_chunk$set(echo = TRUE)
cannyEdges(boats) %>% plot
x11()
cannyEdges(boats) %>% plot
x11()
cannyEdges(boats) %>% plot
edges<-cannyEdges(boats)
edges
plot(plant)
subsetImage<- function(test,xrange,yrange){
newtest<- test %>% as.data.frame
dfnew<-subset(newtest, x%in%xrange & y%in%yrange)
dfnew<- as.cimg(dfnew)
return(dfnew)}
plot(plant)
#Use cannyedges
leafimage<-subsetImage(plant,500:600,1200:1400)
plot(leafimage)
x11()
plot(leafimage)
plot(leafimage)
#Use cannyedges
leafimage<-subsetImage(plant,450:600,1100:1400)
plot(leafimage)
x11()
plot(leafimage)
#Use cannyedges
leafimage<-subsetImage(plant,450:600,1150:1400)
plot(leafimage)
x11()
plot(leafimage)
#Use cannyedges
leafimage<-subsetImage(plant,450:600,1175:1400)
plot(leafimage)
x11()
plot(leafimage)
x11()
plot(leafimage)
leafimage<-subsetImage(plant,450:600,1175:1450)
x11()
plot(leafimage)
leafimage<-subsetImage(plant,450:600,1175:1500)
x11()
plot(leafimage)
edges<-cannyEdges(leafimage)
plot(edges)
x11()
plot(edges)
x11()
plot(edges)
x11()
plot(edges)
#Use cannyedges
leafimage<-subim(plant, x%inr%450:600,y%inr%1175:1500)
#Use cannyedges
leafimage<-subim(plant, x%inr% c(450,600),y%inr% c(1175,1500))
plot(leafimage)
x11()
plot(leafimage)
x11()
plot(leafimage)
x11()
plot(leafimage)
edges<-cannyEdges(leafimage)
x11()
plot(edges)
x11()
plot(edges)
?cannyEdges
x11()
install.packages('EBIMage')
BiocManager::install() f
BiocManager::install()
install.packages("BiocManager")
BiocManager::available()
BiocManager::install('EBIMage')
BiocManager::install('EBImage')
library('EBimage')
library('EBImage')
x = readImage(system.file("images", "shapes.png", package="EBImage"))[25:74, 60:109]
x = resize(x, 200)
y = gblur(x, 3) > .3
display(y)
contours = ocontour(bwlabel(y))
c = localCurvature(x=contours[[1]], h=11)
i = c$curvature >= 0
pos = neg = array(0, dim(x))
pos[c$contour[i,]+1]  = c$curvature[i]
neg[c$contour[!i,]+1] = -c$curvature[!i]
display(10*(rgbImage(pos, , neg)), title = "Image curvature")
plot(x)
computeFeatures.shape(x)
computeFeatures.shape(edges)
x
#Use cannyedges
library('EBImage')
test<-readImage('~/Documents/Github/PhD//imageprocessing/burseragrav1.jpg')
leafimage<-subim(test, x%inr% c(450,600),y%inr% c(1175,1500))
test[1:5,5:10]
leafimage<-subset(test, x%inr% c(450,600),y%inr% c(1175,1500))
plot(leafimage)
x11()
plot(leafimage)
?as.Image
display(leafimage)
leafimage<-test[450:600,1175:1500]
test<-readImage('~/Documents/Github/PhD//imageprocessing/burseragrav1.jpg')
crop<-test[450:600,1175:1500]
test
display(test)
img<-test[450:600,1175:1500]
img<-readImage('~/Documents/Github/PhD//imageprocessing/burseragrav1.jpg')
img_crop = img[366:749, 58:441]
